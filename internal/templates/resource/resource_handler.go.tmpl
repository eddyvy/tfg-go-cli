package {{.Table.Name}}

import (
	"encoding/json"
	"math/big"
	"net"
	"time"
	"log"
	"net/http"

	"{{.ProjectConfig.Base}}{{.ProjectConfig.Name}}/internal/parser"
	"github.com/gofiber/fiber/v2"
)

func HandleGetAll(c *fiber.Ctx) error {
	{{.Table.Name}}s, err := findAll()

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusBadRequest).JSON(map[string]string{"message": err.Error()})
	}

	return c.JSON(&{{.Table.Name}}s)
}

func HandleGetOne(c *fiber.Ctx) error {
	idParam := c.Params("id")

	id, err := parser.StringToInt(idParam)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid ID")
	}

	{{.Table.Name}}, err := findOne(id)

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.JSON(&{{.Table.Name}})
}

func HandlePost(c *fiber.Ctx) error {
	{{.Table.InputName}} := new(CreateInput)

	if err := c.BodyParser({{.Table.InputName}}); err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid input")
	}

	{{.Table.Name}}, err := create({{.Table.InputName}})

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.Status(201).JSON(&{{.Table.Name}})
}

func HandlePut(c *fiber.Ctx) error {
	idParam := c.Params("id")

	id, err := parser.StringToInt(idParam)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid ID")
	}

	{{.Table.InputName}} := new(UpdateInput)

	if err := c.BodyParser({{.Table.InputName}}); err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid input")
	}

	{{.Table.Name}}, err := update(id, {{.Table.InputName}})

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.Status(http.StatusCreated).JSON(&{{.Table.Name}})
}

func HandleDelete(c *fiber.Ctx) error {
	idParam := c.Params("id")

	idInt, err := parser.StringToInt(idParam)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid ID")
	}

	err = delete(idInt)

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.JSON(map[string]string{"message": "Resource deleted successfully"})
}
