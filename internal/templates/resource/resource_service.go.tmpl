package {{.Table.Name}}

import (
	"database/sql"
	"encoding/json"
	"math/big"
	"net"
	"time"
	
	"{{.ProjectConfig.Base}}{{.ProjectConfig.Name}}/internal/database"
)

func findAll() ([]*Model, error) {
	sqlStr := `SELECT * FROM {{.Table.Name}}`
	rows, err := database.DB.Query(sqlStr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	{{.Table.Name}}s := make([]*Model, 0)
	for rows.Next() {
		{{.Table.Name}} := new(Model)
		err := rows.Scan({{.Table.ModelScanParams}})
		if err != nil {
			return nil, err
		}
		{{.Table.Name}}s = append({{.Table.Name}}s, {{.Table.Name}})
	}

	return {{.Table.Name}}s, nil
}

func findOne({{.Table.PrimaryKeysFuncParams}}) (*Model, error) {
	sqlStr := `SELECT * FROM {{.Table.Name}} {{.Table.PrimaryKeysWhereClause}}`

	{{.Table.Name}} := new(Model)
	row := database.DB.QueryRow(sqlStr, {{.Table.PrimaryKeysByComma}})
	err := row.Scan({{.Table.ModelScanParams}})

	if err != nil {
		return nil, err
	}

	return {{.Table.Name}}, nil
}

func create({{.Table.InputName}} *CreateInput) (*Model, error) {
	sqlStr := `INSERT INTO {{.Table.Name}} ({{.Table.CreateInputByComma}}) VALUES ({{.Table.CreateInputNumbersByComma}}) RETURNING {{.Table.ColumnsByComma}}`

	{{.Table.Name}} := new(Model)
	row := database.DB.QueryRow(sqlStr, {{.Table.CreateInputParams}})
	err := row.Scan({{.Table.ModelScanParams}})
	if err != nil {
		return nil, err
	}

	return {{.Table.Name}}, nil
}

func update({{.Table.PrimaryKeysFuncParams}}, {{.Table.InputName}} *UpdateInput) (*Model, error) {
	sqlStr := `UPDATE {{.Table.Name}} {{.Table.UpdateSetClause}} {{.Table.PrimaryKeysWhereClause}}`

	{{.Table.Name}} := new(Model)
	row := database.DB.QueryRow(sqlStr, {{.Table.UpdateInputParams}}, {{.Table.PrimaryKeysByComma}})
	err := row.Scan({{.Table.ModelScanParams}})
	if err != nil {
		return nil, err
	}

	return {{.Table.Name}}, nil
}

func delete({{.Table.PrimaryKeysFuncParams}}) error {
	sqlStr := `DELETE FROM {{.Table.Name}} {{.Table.PrimaryKeysWhereClause}}`

	_, err := database.DB.Exec(sqlStr, {{.Table.PrimaryKeysByComma}})
	if err != nil {
		return err
	}

	return nil
}
