package {{.Table.Name}}

import (
	"encoding/json"
	"math/big"
	"net"
	"time"
	"log"
	"net/http"

	"{{.ProjectConfig.Base}}{{.ProjectConfig.Name}}/internal/parser"
	"github.com/gofiber/fiber/v2"
)

func HandleGetAll(c *fiber.Ctx) error {
	{{.Table.PluralName}}, err := findAll()

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusBadRequest).JSON(map[string]string{"message": err.Error()})
	}

	return c.JSON(&{{.Table.PluralName}})
}

func HandleGetOne(c *fiber.Ctx) error { {{range .Table.PrimaryKeys}}
	{{.Name}}Param := c.Params("{{.Name}}")
	{{.Name}}, err := parser.{{.ParserFunc}}({{.Name}}Param)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid {{.Name}}")
	}
	{{end}}
	{{.Table.SingularName}}, err := findOne({{.Table.PrimaryKeysByComma}})

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.JSON(&{{.Table.SingularName}})
}

func HandlePost(c *fiber.Ctx) error {
	{{.Table.InputName}} := new(CreateInput)

	if err := c.BodyParser({{.Table.InputName}}); err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid input")
	}

	{{.Table.SingularName}}, err := create({{.Table.InputName}})

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.Status(http.StatusCreated).JSON(&{{.Table.SingularName}})
}

func HandlePut(c *fiber.Ctx) error { {{range .Table.PrimaryKeys}}
	{{.Name}}Param := c.Params("{{.Name}}")
	{{.Name}}, err := parser.{{.ParserFunc}}({{.Name}}Param)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid {{.Name}}")
	}
	{{end}}
	{{.Table.InputName}} := new(UpdateInput)

	if err := c.BodyParser({{.Table.InputName}}); err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid input")
	}

	{{.Table.SingularName}}, err := update({{.Table.PrimaryKeysByComma}}, {{.Table.InputName}})

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.JSON(&{{.Table.SingularName}})
}

func HandleDelete(c *fiber.Ctx) error { {{range .Table.PrimaryKeys}}
	{{.Name}}Param := c.Params("{{.Name}}")
	{{.Name}}, err := parser.{{.ParserFunc}}({{.Name}}Param)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON("Invalid {{.Name}}")
	}
	{{end}}
	err = delete({{.Table.PrimaryKeysByComma}})

	if err != nil {
		log.Println(err)
		return c.Status(http.StatusInternalServerError).JSON(map[string]string{"message": err.Error()})
	}

	return c.JSON(map[string]string{"message": "Resource deleted successfully"})
}
