package parser

import (
	"database/sql"
	"encoding/json"
	"time"
)

type NullBool struct {
	sql.NullBool
}

type NullString struct {
	sql.NullString
}

type NullInt32 struct {
	sql.NullInt32
}

type NullInt64 struct {
	sql.NullInt64
}

type NullTime struct {
	sql.NullTime
}
type NullFloat64 struct {
	sql.NullFloat64
}

func (n NullBool) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return json.Marshal(n.Bool)
	}
	return json.Marshal(nil)
}

func (n *NullBool) UnmarshalJSON(b []byte) error {
	if string(b) == "null" {
		n.Valid = false
		return nil
	}

	var val bool
	if err := json.Unmarshal(b, &val); err != nil {
		return err
	}

	n.Bool = val
	n.Valid = true
	return nil
}

func (n NullString) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return json.Marshal(n.String)
	}
	return json.Marshal(nil)
}

func (n *NullString) UnmarshalJSON(b []byte) error {
	if string(b) == "null" {
		n.Valid = false
		return nil
	}

	var val string
	if err := json.Unmarshal(b, &val); err != nil {
		return err
	}

	n.String = val
	n.Valid = true
	return nil
}

func (n NullInt32) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return json.Marshal(n.Int32)
	}
	return json.Marshal(nil)
}

func (n *NullInt32) UnmarshalJSON(b []byte) error {
	if string(b) == "null" {
		n.Valid = false
		return nil
	}

	var val int32
	if err := json.Unmarshal(b, &val); err != nil {
		return err
	}

	n.Int32 = val
	n.Valid = true
	return nil
}

func (n NullInt64) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return json.Marshal(n.Int64)
	}
	return json.Marshal(nil)
}

func (n *NullInt64) UnmarshalJSON(b []byte) error {
	if string(b) == "null" {
		n.Valid = false
		return nil
	}

	var val int64
	if err := json.Unmarshal(b, &val); err != nil {
		return err
	}

	n.Int64 = val
	n.Valid = true
	return nil
}

func (n NullTime) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return json.Marshal(n.Time)
	}
	return json.Marshal(nil)
}

func (n *NullTime) UnmarshalJSON(b []byte) error {
	if string(b) == "null" {
		n.Valid = false
		return nil
	}

	var val time.Time
	if err := json.Unmarshal(b, &val); err != nil {
		return err
	}

	n.Time = val
	n.Valid = true
	return nil
}

func (n NullFloat64) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return json.Marshal(n.Float64)
	}
	return json.Marshal(nil)
}

func (n *NullFloat64) UnmarshalJSON(b []byte) error {
	if string(b) == "null" {
		n.Valid = false
		return nil
	}

	var val float64
	if err := json.Unmarshal(b, &val); err != nil {
		return err
	}

	n.Float64 = val
	n.Valid = true
	return nil
}
